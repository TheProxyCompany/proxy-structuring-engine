////////////////////////////
// Bash Grammar for Lark
////////////////////////////

%ignore /[ \t]+/        // Ignore horizontal whitespace
%ignore /\\(\r?\n)+/    // Handle backslash-newline continuations

NEWLINE: /\r?\n+/
COMMENT: /#[^\n]*/
%ignore COMMENT

////////////////////////////
// Basic Terminals
////////////////////////////

LETTER: /[a-zA-Z]/
DIGIT: /[0-9]/

THEN: "then"
FI: "fi"
DO: "do"
DONE: "done"
IN: "in"
ESAC: "esac"
LPAR: "("
RPAR: ")"
LBRACE: "{"
RBRACE: "}"
SEMICOLON: ";"
LBRACKET: "["
RBRACKET: "]"
AMPERSAND: "&"
VBAR: "|"
BANG: "!"
MORETHAN: ">"
LESSTHAN: "<"
EQUAL: "="
PLUS: "+"
MINUS: "-"
DOT: "."
SLASH: "/"
COLON: ":"
COMMA: ","
AT: "@"
TILDE: "~"
UNDERSCORE: "_"
DOUBLE_SEMICOLON: ";;"

IF: "if"
ELSE: "else"
ELIF: "elif"
FOR: "for"
WHILE: "while"
UNTIL: "until"
CASE: "case"
FUNCTION: "function"
SELECT: "select"
TIME: "time"

////////////////////////////
// Word-like Tokens
////////////////////////////

number: DIGIT+

word: WORD
WORD: /[a-zA-Z_][a-zA-Z0-9_\-\.\/:\+@=~]*/
    | /\-[a-zA-Z0-9_\-\.\/:\+@=~]+/

STRING: /'[^']*'?/
      | /"[^"]*"?/

VARIABLE: "$" (LETTER | DIGIT | UNDERSCORE | "{" /[^}]*/ "}")?
        | "$" /[a-zA-Z0-9_]+/
        | "$" /[a-zA-Z0-9_]+/(":" /[a-zA-Z0-9_\/\.]+/)?

CMD_SUBST: "$(" /[^)]*/ ")"?
ARITH_EXPR: "$((" /[^)]*/ "))"?
          | "((" /[^)]*/ "))"?
TEST_EXPR: LBRACKET /[^]]*/ RBRACKET?
         | "[[" /[^]]*/ "]]"?
FD: /[0-9]+/

////////////////////////////
// Start / Script
////////////////////////////

start: script
script: (COMMENT | command | separator)+
       |  // empty (optional)

////////////////////////////
// Commands
////////////////////////////

?command: simple_command
        | shell_command
        | shell_command redirection_list

////////////////////////////
// Redirection
////////////////////////////

?redirection: redirect_op word?
            | FD? redirect_op word?
            | FD? (MORETHAN | LESSTHAN) AMPERSAND FD?
            | FD? MORETHAN MORETHAN word

!redirect_op: ">"
             | "<"
             | ">>"
             | "<<"
             | "<&"
             | ">&"
             | "<<-"
             | "&>"
             | "<>"
             | ">|"

redirection_list: redirection+

////////////////////////////
// Simple Commands
////////////////////////////

simple_command: simple_command_element+
?simple_command_element: word
                       | STRING
                       | VARIABLE
                       | CMD_SUBST
                       | ARITH_EXPR
                       | TEST_EXPR
                       | assignment_word
                       | redirection

assignment_word: word EQUAL (word | STRING | VARIABLE | CMD_SUBST | ARITH_EXPR)

////////////////////////////
// Shell Commands
////////////////////////////

?shell_command: if_command
              | for_command
              | while_command
              | until_command
              | select_command
              | case_command
              | subshell
              | group_command
              | function_def

if_command: IF compound_list THEN compound_list elif_clause* (ELSE compound_list)? FI
elif_clause: ELIF compound_list THEN compound_list

for_command: FOR word (IN word_list)? separator? DO compound_list DONE
while_command: WHILE compound_list DO compound_list DONE
until_command: UNTIL compound_list DO compound_list DONE
select_command: SELECT word (IN word_list)? separator? DO compound_list DONE

case_command: CASE word_or_var IN case_item* ESAC
?word_or_var: word | STRING | VARIABLE
case_item: pattern_list RPAR ((separator)* compound_list)? terminator? (separator)*
pattern_list: (word | STRING | VARIABLE) (VBAR (word | STRING | VARIABLE))*
terminator: DOUBLE_SEMICOLON | ";&" | ";;&"

subshell: LPAR compound_list RPAR
group_command: LBRACE compound_list RBRACE

// Function definitions now require a group command as the function body.
function_def: FUNCTION? word (LPAR RPAR)? group_command

////////////////////////////
// Word List
////////////////////////////

word_list: (word | STRING | VARIABLE | CMD_SUBST | ARITH_EXPR)+

////////////////////////////
// Compound List
////////////////////////////

compound_list: (COMMENT | pipeline_command) (separator (COMMENT | pipeline_command))* separator?
pipeline_command: BANG? pipe_sequence
pipe_sequence: command (VBAR command)*

////////////////////////////
// Separator
////////////////////////////

separator: SEMICOLON | NEWLINE
