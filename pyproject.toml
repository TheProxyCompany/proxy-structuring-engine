[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pse"
version = "1.5.0"
authors = [
    { name = "Jack Wind", email = "jckwind11@gmail.com" },
    { name = "The Proxy Company", email = "contact@theproxy.company" }
]
description = "Proxy Structuring Engine: Ensures AI-generated output adheres to predefined schemas without compromising creativity, speed, or context."
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
keywords = [
    "LLM",
    "large-action-models",
    "directed-acyclic-word-graph",
    "finite-automaton",
    "lazy-evaluation",
    "structured-output",
    "schema-guided-sampling",
    "AI-automation",
    "JSON-schema",
    "tool-integration"
]
dependencies = [
    "regex",
    "setuptools",
    "tokenizers",
    "tqdm",
    "transformers",
    "typing_extensions",
    "urllib3",
    "wheel",
    "protobuf",
    "pydantic",
    "flake8",
    "pse-core",
]

[project.urls]
homepage = "https://github.com/TheProxyCompany/proxy-structuring-engine"
documentation = "https://github.com/TheProxyCompany/proxy-structuring-engine#readme"
source = "https://github.com/TheProxyCompany/proxy-structuring-engine"

[project.optional-dependencies]
dev = [
    "pytest",
    "ruff",
    "coverage",
    "numpy",
    "flake8",
    "torch",
    "sentencepiece",
    "pse-core"
]
mlx = ["mlx", "mlx-lm"]
torch = ["torch"]
jax = ["jax", "jaxlib"]
benchmark = [
    "outlines @ git+https://github.com/cmcmaster1/outlines.git@5bdfb9e9f6eba3353c978b4be82fdee35ab2fab5",
    "lm-format-enforcer",
    "openai",
    "instructor"
]
all = [
    "pytest",
    "jax",
    "jaxlib",
    "mlx",
    "mlx-lm",
    "torch",
    "outlines @ git+https://github.com/cmcmaster1/outlines.git@5bdfb9e9f6eba3353c978b4be82fdee35ab2fab5",
    "lm-format-enforcer",
    "openai",
    "instructor",
]

[tool.pytest.ini_options]
log_cli = false
log_cli_level = "INFO"
log_cli_format = "in %(filename)s:%(lineno)d [%(levelname)s] %(message)s"
log_cli_date_format = "%H:%M:%S"

[tool.ruff.lint]
extend-select = [
  "B",    # flake8-bugbear
  "I",    # isort
  "PGH",  # pygrep-hooks
  "RUF",  # Ruff-specific
  "UP",   # pyupgrade
  "SLF",  # SLLF
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
include = [
    "LICENSE",
    "README.md",
    "pyproject.toml",
    "pse"
]

[tool.hatch.build.targets.wheel]
packages = ["pse"]
include = ["pse/**"]
optimize = true
ignore-vcs = true

[tool.hatch.envs.default]
python = "3.11"
env-vars = { PYTHONOPTIMIZE = "2" }

# [tool.hatch.build]
# dev-mode-dirs = ["pse"]
# artifacts = ["pse/**/*.py[cod]", "pse/**/*.so"]

# [tool.hatch.build.targets.wheel.hooks.mypyc]
# dependencies = ["mypy[mypyc]", "hatch-mypyc"]
# mypy-args = [
#     "--ignore-missing-imports",
#     "--verbose",
#     "--allow-redefinition",
#     "--disable-error-code=attr-defined",
#     "--disable-error-code=assignment",
#     "--disable-error-code=type-var",
#     "--disable-error-code=method-assign",
#     "--disable-error-code=misc",
#     "--disable-error-code=no-untyped-def",
#     "--disable-error-code=no-untyped-call",
#     "--disable-error-code=assert-type",
# ]
# exclude = [
#     "pse/util/*",
#     "pse/state_machines/schema/*"
# ]
